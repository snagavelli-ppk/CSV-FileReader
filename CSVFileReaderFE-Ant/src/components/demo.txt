import React from 'react';
import { Form, Input, Button, Select, Typography } from 'antd';
import { UploadOutlined } from '@ant-design/icons';
import CSVReaderWrapper from './CSVReaderWrapper';
import { Employee, Depts, Sites, FormData } from './interfaces';
import { mapCSVToEmployee, mapCSVToDepts, mapCSVToSites } from './csvMapping';
import { submitFormData } from './apiCalls';

const { Option } = Select;

const AntForm: React.FC = () => {
  const [form] = Form.useForm();
  const [email, setEmail] = React.useState<string>('');
  const [selectedFileName, setSelectedFileName] = React.useState<string>('');
  const [employData, setEmployData] = React.useState<Employee[]>([]);
  const [deptsData, setDeptsData] = React.useState<Depts[]>([]);
  const [sitesData, setSitesData] = React.useState<Sites[]>([]);
  const [emailError, setEmailError] = React.useState<string>('');
  const [fileError, setFileError] = React.useState<string>('');

  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setEmail(value);
    setEmailError(validateEmail(value));
  };

  const handleFileSelectChange = (value: string) => {
    setSelectedFileName(value);
    setFileError('');
  };

  const isValidCSV = (data: any[], expectedHeaders: string[]): boolean => {
    if (data.length === 0) {
      return false;
    }

    const headers = data[0];
    return expectedHeaders.every((header, index) => headers[index] === header);
  };

  const handleCSVRead = (data: any[]) => {
    const formattedData = mapCSVToEmployee(data);
    setEmployData(formattedData);

    if (
      selectedFileName === 'employees.csv' &&
      !isValidCSV(data, ['id', 'name', 'deptname', 'deptno', 'sitename', 'siteno'])
    ) {
      setFileError('Invalid CSV file for Employees.');
    } else {
      setFileError('');
    }
  };

  const handleDeptsCSVRead = (data: any[]) => {
    const formattedData = mapCSVToDepts(data);
    setDeptsData(formattedData);

    if (selectedFileName === 'depts.csv' && !isValidCSV(data, ['deptname', 'deptno'])) {
      setFileError('Invalid CSV file for Depts.');
    } else {
      setFileError('');
    }
  };

  const handleSitesCSVRead = (data: any[]) => {
    const formattedData = mapCSVToSites(data);
    setSitesData(formattedData);

    if (selectedFileName === 'sites.csv' && !isValidCSV(data, ['sitename', 'siteno'])) {
      setFileError('Invalid CSV file for Sites.');
    } else {
      setFileError('');
    }
  };

  const handleSubmit = async () => {
    let valid = true;

    if (!email) {
      setEmailError('Email is required.');
      valid = false;
    } else {
      setEmailError(validateEmail(email));
    }

    if (!selectedFileName) {
      setFileError('File is required.');
      valid = false;
    } else if (fileError) {
      valid = false;
    } else {
      setFileError('');
    }

    if (selectedFileName === 'employees.csv' && employData.length === 0) {
      setFileError('Please select a valid Employees CSV file.');
      valid = false;
    }

    if (valid) {
      try {
        const formData: FormData = {
          email,
          fileName: selectedFileName,
          fileData: [],
        };
        switch (selectedFileName) {
          case 'employees.csv':
            formData.fileData = employData;
            break;
          case 'depts.csv':
            formData.fileData = deptsData;
            break;
          case 'sites.csv':
            formData.fileData = sitesData;
            break;
          default:
            break;
        }

        const res = await submitFormData(formData);
        console.log(res);
        form.resetFields();
        setEmail('');
        setSelectedFileName('');
        setEmployData([]);
        setDeptsData([]);
        setSitesData([]);
      } catch (error) {
        console.error('Error submitting Data : ', error);
      }
    }
  };

  const getFileFormatInfo = (fileName: string): string => {
    switch (fileName) {
      case 'employees.csv':
        return 'Columns: id, name, deptname, deptno, sitename, siteno';
      case 'depts.csv':
        return 'Columns: deptname, deptno';
      case 'sites.csv':
        return 'Columns: sitename, siteno';
      default:
        return '';
    }
  };

  const isSubmitDisabled = (): boolean => {
    if (!email || emailError || !selectedFileName || fileError) {
      return true;
    }

    if (selectedFileName === 'employees.csv' && (employData.length === 0 || fileError)) {
      return true;
    }

    return false;
  };

  const validateEmail = (value: string): string => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(value) ? '' : 'Invalid email format';
  };

  return (
    <div style={{ width: '50%', margin: 'auto' }}>
      <Typography.Title level={3}>Ant Design Email and CSV App</Typography.Title>
      <Form
        form={form}
        labelCol={{ span: 8 }}
        wrapperCol={{ span: 16 }}
        onFinish={handleSubmit}
        initialValues={{ email: '', fileSelect: '' }}
      >
        <Form.Item
          label="Email"
          name="email"
          rules={[{ required: true, message: 'Please enter your email' }]}
          hasFeedback
        >
          <Input type="email" value={email} onChange={handleEmailChange} />
        </Form.Item>

        <Form.Item
          label="Select CSV File"
          name="fileSelect"
          rules={[{ required: true, message: 'Please select a CSV file' }]}
          hasFeedback
        >
          <Select
            placeholder="Select CSV File"
            value={selectedFileName}
            onChange={handleFileSelectChange}
          >
            <Option value="employees.csv">Employees CSV</Option>
            <Option value="depts.csv">Depts CSV</Option>
            <Option value="sites.csv">Sites CSV</Option>
          </Select>
        </Form.Item>

        <Form.Item
          label={`Upload ${selectedFileName} CSV File`}
          name="upload"
          valuePropName="fileList"
          getValueFromEvent={(e) => e.fileList}
          extra={`Please upload a ${selectedFileName} CSV file`}
        >
          <CSVReaderWrapper
            onFileLoaded={(data: any[]) => {
              if (selectedFileName === 'employees.csv') {
                handleCSVRead(data);
              } else if (selectedFileName === 'depts.csv') {
                handleDeptsCSVRead(data);
              } else if (selectedFileName === 'sites.csv') {
                handleSitesCSVRead(data);
              }
            }}
          />
        </Form.Item>

        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>
          <Button type="primary" htmlType="submit" disabled={isSubmitDisabled()}>
            Submit <UploadOutlined />
          </Button>
        </Form.Item>
      </Form>
      {selectedFileName && (
        <div>
          <Typography.Text>{getFileFormatInfo(selectedFileName)}</Typography.Text>
        </div>
      )}
      {fileError && <Typography.Text type="danger">{fileError}</Typography.Text>}
    </div>
  );
};

export default AntForm;
